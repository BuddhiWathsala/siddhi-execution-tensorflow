{
    "docs": [
        {
            "location": "/", 
            "text": "Siddhi Execution TensorFlow\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nThe \nsiddhi-execution-tensorflow extension\n is a \nSiddhi\n extension that provides support for running pre-built TensorFlow models. \n\n\nFor information on \nSiddhi\n and it's features refer \nSiddhi Documentation\n. \n\n\nDownload\n\n\n\n\nVersions 2.x and above with group id \nio.siddhi.extension.*\n from \nhere\n.\n\n\nVersions 1.x and lower with group id \norg.wso2.extension.siddhi.*\n from \nhere\n.\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n2.0.1\n.\n\n\nFeatures\n\n\n\n\npredict\n \n(\nStream Processor\n)\n \nPerforms inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions.\n1. They are saved with the tag 'serve' in SavedModel format for more info see \nhere\n.\n2. Model is initially trained and ready for inferences\n3. Inference logic is written and saved in the model\n4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default'\nAlso the prerequisites for inference are as follows.\n1. User knows the names of the input and output nodes\n2. Has a preprocessed data set of Java primitive types or their multidimensional arrays\nSince each input is directly used to create a Tensor they should be of compatible shape and data type with the model.\nThe information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at \nhttps://www.tensorflow.org/programmers_guide/saved_model\n.\nsignature_def can be read in Python as follows\n\nwith tf.Session() as sess:\n  md = tf.saved_model.loader.load(sess, ['serve'], export_dir)\n  sig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY]\n  print(sig)\n\nOr you can read signature def from Java as follows,\n\nfinal String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\";\nfinal SignatureDef sig =\n      MetaGraphDef.parseFrom(model.metaGraphDef())\n          .getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY);\n\nYou will have to import the following in Java.\nimport org.tensorflow.framework.MetaGraphDef;\nimport org.tensorflow.framework.SignatureDef;\n\n\n\n\nDependencies\n\n\nThere are no other dependencies needed for this extension. \n\n\nInstallation\n\n\nFor installing this extension on various siddhi execution environments refer Siddhi documentation section on \nadding extensions\n.\n\n\nSupport and Contribution\n\n\n\n\n\n\nWe encourage users to ask questions and get support via \nStackOverflow\n, make sure to add the \nsiddhi\n tag to the issue for better response.\n\n\n\n\n\n\nIf you find any issues related to the extension please report them on \nthe issue tracker\n.\n\n\n\n\n\n\nFor production support and other contribution related information refer \nSiddhi Community\n documentation.", 
            "title": "Information"
        }, 
        {
            "location": "/#siddhi-execution-tensorflow", 
            "text": "The  siddhi-execution-tensorflow extension  is a  Siddhi  extension that provides support for running pre-built TensorFlow models.   For information on  Siddhi  and it's features refer  Siddhi Documentation .", 
            "title": "Siddhi Execution TensorFlow"
        }, 
        {
            "location": "/#download", 
            "text": "Versions 2.x and above with group id  io.siddhi.extension.*  from  here .  Versions 1.x and lower with group id  org.wso2.extension.siddhi.*  from  here .", 
            "title": "Download"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  2.0.1 .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#features", 
            "text": "predict   ( Stream Processor )   Performs inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions. 1. They are saved with the tag 'serve' in SavedModel format for more info see  here . 2. Model is initially trained and ready for inferences 3. Inference logic is written and saved in the model 4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default' Also the prerequisites for inference are as follows. 1. User knows the names of the input and output nodes 2. Has a preprocessed data set of Java primitive types or their multidimensional arrays Since each input is directly used to create a Tensor they should be of compatible shape and data type with the model. The information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at  https://www.tensorflow.org/programmers_guide/saved_model . signature_def can be read in Python as follows \nwith tf.Session() as sess:\n  md = tf.saved_model.loader.load(sess, ['serve'], export_dir)\n  sig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY]\n  print(sig) Or you can read signature def from Java as follows, \nfinal String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\";\nfinal SignatureDef sig =\n      MetaGraphDef.parseFrom(model.metaGraphDef())\n          .getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY); You will have to import the following in Java. import org.tensorflow.framework.MetaGraphDef; import org.tensorflow.framework.SignatureDef;", 
            "title": "Features"
        }, 
        {
            "location": "/#dependencies", 
            "text": "There are no other dependencies needed for this extension.", 
            "title": "Dependencies"
        }, 
        {
            "location": "/#installation", 
            "text": "For installing this extension on various siddhi execution environments refer Siddhi documentation section on  adding extensions .", 
            "title": "Installation"
        }, 
        {
            "location": "/#support-and-contribution", 
            "text": "We encourage users to ask questions and get support via  StackOverflow , make sure to add the  siddhi  tag to the issue for better response.    If you find any issues related to the extension please report them on  the issue tracker .    For production support and other contribution related information refer  Siddhi Community  documentation.", 
            "title": "Support and Contribution"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v2.0.1\n\n\n\n\nTested Siddhi Core version: \n5.0.2\n\n\nIt could also support other Siddhi Core minor versions.\n\n\n\n\nTensorflow\n\n\npredict \n(Stream Processor)\n\n\nPerforms inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions.\n1. They are saved with the tag 'serve' in SavedModel format for more info see \nhere\n.\n2. Model is initially trained and ready for inferences\n3. Inference logic is written and saved in the model\n4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default'\nAlso the prerequisites for inference are as follows.\n1. User knows the names of the input and output nodes\n2. Has a preprocessed data set of Java primitive types or their multidimensional arrays\nSince each input is directly used to create a Tensor they should be of compatible shape and data type with the model.\nThe information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at \nhttps://www.tensorflow.org/programmers_guide/saved_model\n.\nsignature_def can be read in Python as follows\n\nwith tf.Session() as sess:\n  md = tf.saved_model.loader.load(sess, ['serve'], export_dir)\n  sig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY]\n  print(sig)\n\nOr you can read signature def from Java as follows,\n\nfinal String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\";\nfinal SignatureDef sig =\n      MetaGraphDef.parseFrom(model.metaGraphDef())\n          .getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY);\n\nYou will have to import the following in Java.\nimport org.tensorflow.framework.MetaGraphDef;\nimport org.tensorflow.framework.SignatureDef;\n\n\nSyntax\n\n\ntensorFlow:predict(\nSTRING\n absolute.path.to.model, \nSTRING\n input.node.names, \nSTRING\n output.node.names, \nINT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT\n attribute, \nINT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT\n ...)\ntensorFlow:predict(\nSTRING\n absolute.path.to.model, \nINT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT\n attribute, \nINT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nabsolute.path.to.model\n\n        \nThis is the absolute path to the model folder in the local machine.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \ninput.node.names\n\n        \nThis is a variable length parameter. The names of the input nodes as comma separated strings.\n\n        \n-\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \noutput.node.names\n\n        \nThis is a variable length parameter. The names of the output nodes as comma separated strings.\n\n        \n-\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nattribute\n\n        \nThis is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent.\n\n        \n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \noutputs\n\n        \nThis is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def\n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;\n\n\n\n\n\nThis is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v201", 
            "text": "Tested Siddhi Core version:  5.0.2  It could also support other Siddhi Core minor versions.", 
            "title": "API Docs - v2.0.1"
        }, 
        {
            "location": "/api/latest/#tensorflow", 
            "text": "", 
            "title": "Tensorflow"
        }, 
        {
            "location": "/api/latest/#predict-stream-processor", 
            "text": "Performs inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions. 1. They are saved with the tag 'serve' in SavedModel format for more info see  here . 2. Model is initially trained and ready for inferences 3. Inference logic is written and saved in the model 4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default' Also the prerequisites for inference are as follows. 1. User knows the names of the input and output nodes 2. Has a preprocessed data set of Java primitive types or their multidimensional arrays Since each input is directly used to create a Tensor they should be of compatible shape and data type with the model. The information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at  https://www.tensorflow.org/programmers_guide/saved_model . signature_def can be read in Python as follows \nwith tf.Session() as sess:\n  md = tf.saved_model.loader.load(sess, ['serve'], export_dir)\n  sig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY]\n  print(sig) Or you can read signature def from Java as follows, \nfinal String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\";\nfinal SignatureDef sig =\n      MetaGraphDef.parseFrom(model.metaGraphDef())\n          .getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY); You will have to import the following in Java. import org.tensorflow.framework.MetaGraphDef; import org.tensorflow.framework.SignatureDef;  Syntax  tensorFlow:predict( STRING  absolute.path.to.model,  STRING  input.node.names,  STRING  output.node.names,  INT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT  attribute,  INT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT  ...)\ntensorFlow:predict( STRING  absolute.path.to.model,  INT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT  attribute,  INT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         absolute.path.to.model \n         This is the absolute path to the model folder in the local machine. \n         \n         STRING \n         No \n         Yes \n     \n     \n         input.node.names \n         This is a variable length parameter. The names of the input nodes as comma separated strings. \n         - \n         STRING \n         Yes \n         Yes \n     \n     \n         output.node.names \n         This is a variable length parameter. The names of the output nodes as comma separated strings. \n         - \n         STRING \n         Yes \n         Yes \n     \n     \n         attribute \n         This is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent. \n         \n         INT STRING DOUBLE LONG FLOAT BOOL OBJECT \n         No \n         Yes \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         outputs \n         This is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def \n         INT STRING DOUBLE LONG FLOAT BOOL \n       Examples  EXAMPLE 1  define stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;  This is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "predict (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.1/", 
            "text": "API Docs - v2.0.1\n\n\n\n\nTested Siddhi Core version: \n5.0.2\n\n\nIt could also support other Siddhi Core minor versions.\n\n\n\n\nTensorflow\n\n\npredict \n(Stream Processor)\n\n\nPerforms inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions.\n1. They are saved with the tag 'serve' in SavedModel format for more info see \nhere\n.\n2. Model is initially trained and ready for inferences\n3. Inference logic is written and saved in the model\n4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default'\nAlso the prerequisites for inference are as follows.\n1. User knows the names of the input and output nodes\n2. Has a preprocessed data set of Java primitive types or their multidimensional arrays\nSince each input is directly used to create a Tensor they should be of compatible shape and data type with the model.\nThe information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at \nhttps://www.tensorflow.org/programmers_guide/saved_model\n.\nsignature_def can be read in Python as follows\n\nwith tf.Session() as sess:\n  md = tf.saved_model.loader.load(sess, ['serve'], export_dir)\n  sig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY]\n  print(sig)\n\nOr you can read signature def from Java as follows,\n\nfinal String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\";\nfinal SignatureDef sig =\n      MetaGraphDef.parseFrom(model.metaGraphDef())\n          .getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY);\n\nYou will have to import the following in Java.\nimport org.tensorflow.framework.MetaGraphDef;\nimport org.tensorflow.framework.SignatureDef;\n\n\nSyntax\n\n\ntensorFlow:predict(\nSTRING\n absolute.path.to.model, \nSTRING\n input.node.names, \nSTRING\n output.node.names, \nINT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT\n attribute, \nINT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT\n ...)\ntensorFlow:predict(\nSTRING\n absolute.path.to.model, \nINT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT\n attribute, \nINT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nabsolute.path.to.model\n\n        \nThis is the absolute path to the model folder in the local machine.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \ninput.node.names\n\n        \nThis is a variable length parameter. The names of the input nodes as comma separated strings.\n\n        \n-\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \noutput.node.names\n\n        \nThis is a variable length parameter. The names of the output nodes as comma separated strings.\n\n        \n-\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nattribute\n\n        \nThis is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent.\n\n        \n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \noutputs\n\n        \nThis is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def\n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;\n\n\n\n\n\nThis is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "2.0.1"
        }, 
        {
            "location": "/api/2.0.1/#api-docs-v201", 
            "text": "Tested Siddhi Core version:  5.0.2  It could also support other Siddhi Core minor versions.", 
            "title": "API Docs - v2.0.1"
        }, 
        {
            "location": "/api/2.0.1/#tensorflow", 
            "text": "", 
            "title": "Tensorflow"
        }, 
        {
            "location": "/api/2.0.1/#predict-stream-processor", 
            "text": "Performs inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions. 1. They are saved with the tag 'serve' in SavedModel format for more info see  here . 2. Model is initially trained and ready for inferences 3. Inference logic is written and saved in the model 4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default' Also the prerequisites for inference are as follows. 1. User knows the names of the input and output nodes 2. Has a preprocessed data set of Java primitive types or their multidimensional arrays Since each input is directly used to create a Tensor they should be of compatible shape and data type with the model. The information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at  https://www.tensorflow.org/programmers_guide/saved_model . signature_def can be read in Python as follows \nwith tf.Session() as sess:\n  md = tf.saved_model.loader.load(sess, ['serve'], export_dir)\n  sig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY]\n  print(sig) Or you can read signature def from Java as follows, \nfinal String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\";\nfinal SignatureDef sig =\n      MetaGraphDef.parseFrom(model.metaGraphDef())\n          .getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY); You will have to import the following in Java. import org.tensorflow.framework.MetaGraphDef; import org.tensorflow.framework.SignatureDef;  Syntax  tensorFlow:predict( STRING  absolute.path.to.model,  STRING  input.node.names,  STRING  output.node.names,  INT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT  attribute,  INT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT  ...)\ntensorFlow:predict( STRING  absolute.path.to.model,  INT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT  attribute,  INT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         absolute.path.to.model \n         This is the absolute path to the model folder in the local machine. \n         \n         STRING \n         No \n         Yes \n     \n     \n         input.node.names \n         This is a variable length parameter. The names of the input nodes as comma separated strings. \n         - \n         STRING \n         Yes \n         Yes \n     \n     \n         output.node.names \n         This is a variable length parameter. The names of the output nodes as comma separated strings. \n         - \n         STRING \n         Yes \n         Yes \n     \n     \n         attribute \n         This is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent. \n         \n         INT STRING DOUBLE LONG FLOAT BOOL OBJECT \n         No \n         Yes \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         outputs \n         This is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def \n         INT STRING DOUBLE LONG FLOAT BOOL \n       Examples  EXAMPLE 1  define stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;  This is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "predict (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.0/", 
            "text": "API Docs - v2.0.0\n\n\nTensorflow\n\n\n\n\nTested Siddhi Core version: \n5.0.0\n\n\nIt could also support other Siddhi Core minor versions.\n\n\n\n\npredict \n(Stream Processor)\n\n\nPerforms inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions.\n1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md)\n2. Model is initially trained and ready for inferences\n3. Inference logic is written and saved in the model\n4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default'\nAlso the prerequisites for inference are as follows.\n1. User knows the names of the input and output nodes\n2. Has a preprocessed data set of Java primitive types or their multidimensional arrays\nSince each input is directly used to create a Tensor they should be of compatible shape and data type with the model.\nThe information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model\nsignature_def can be read in Python as follows\nwith tf.Session() as sess:\nmd = tf.saved_model.loader.load(sess, ['serve'], export_dir)\nsig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY]\nprint(sig)\nOr you can read signature def from Java as follows,\nfinal String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\"; \nfinal SignatureDef sig =\nMetaGraphDef.parseFrom(model.metaGraphDef())\n.getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY);\nYou will have to import the following in Java.\nimport org.tensorflow.framework.MetaGraphDef;\nimport org.tensorflow.framework.SignatureDef;\n\n\n\nSyntax\n\n\ntensorFlow:predict(\nSTRING\n absolute.path.to.model, \nSTRING\n input.node.names, \nSTRING\n output.node.names, \nINT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT\n attributes)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nabsolute.path.to.model\n\n        \nThis is the absolute path to the model folder in the local machine.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.node.names\n\n        \nThis is a variable length parameter. The names of the input nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \noutput.node.names\n\n        \nThis is a variable length parameter. The names of the output nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattributes\n\n        \nThis is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent.\n\n        \n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \noutputs\n\n        \nThis is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def\n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;\n\n\n\n\n\nThis is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "2.0.0"
        }, 
        {
            "location": "/api/2.0.0/#api-docs-v200", 
            "text": "", 
            "title": "API Docs - v2.0.0"
        }, 
        {
            "location": "/api/2.0.0/#tensorflow", 
            "text": "Tested Siddhi Core version:  5.0.0  It could also support other Siddhi Core minor versions.", 
            "title": "Tensorflow"
        }, 
        {
            "location": "/api/2.0.0/#predict-stream-processor", 
            "text": "Performs inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions. 1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md) 2. Model is initially trained and ready for inferences 3. Inference logic is written and saved in the model 4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default' Also the prerequisites for inference are as follows. 1. User knows the names of the input and output nodes 2. Has a preprocessed data set of Java primitive types or their multidimensional arrays Since each input is directly used to create a Tensor they should be of compatible shape and data type with the model. The information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model signature_def can be read in Python as follows with tf.Session() as sess: md = tf.saved_model.loader.load(sess, ['serve'], export_dir) sig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY] print(sig) Or you can read signature def from Java as follows, final String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\";  final SignatureDef sig = MetaGraphDef.parseFrom(model.metaGraphDef()) .getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY); You will have to import the following in Java. import org.tensorflow.framework.MetaGraphDef; import org.tensorflow.framework.SignatureDef;  Syntax  tensorFlow:predict( STRING  absolute.path.to.model,  STRING  input.node.names,  STRING  output.node.names,  INT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT  attributes)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         absolute.path.to.model \n         This is the absolute path to the model folder in the local machine. \n         \n         STRING \n         No \n         No \n     \n     \n         input.node.names \n         This is a variable length parameter. The names of the input nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         output.node.names \n         This is a variable length parameter. The names of the output nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         attributes \n         This is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent. \n         \n         INT STRING DOUBLE LONG FLOAT BOOL OBJECT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         outputs \n         This is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def \n         INT STRING DOUBLE LONG FLOAT BOOL \n       Examples  EXAMPLE 1  define stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;  This is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "predict (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.1/", 
            "text": "API Docs - v1.1.1\n\n\nTensorflow\n\n\npredict \n(Stream Processor)\n\n\nPerforms inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions.\n1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md)\n2. Model is initially trained and ready for inferences\n3. Inference logic is written and saved in the model\n4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default'\nAlso the prerequisites for inference are as follows.\n1. User knows the names of the input and output nodes\n2. Has a preprocessed data set of Java primitive types or their multidimensional arrays\nSince each input is directly used to create a Tensor they should be of compatible shape and data type with the model.\nThe information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model\nsignature_def can be read in Python as follows\nwith tf.Session() as sess:\nmd = tf.saved_model.loader.load(sess, ['serve'], export_dir)\nsig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY]\nprint(sig)\nOr you can read signature def from Java as follows,\nfinal String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\"; \nfinal SignatureDef sig =\nMetaGraphDef.parseFrom(model.metaGraphDef())\n.getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY);\nYou will have to import the following in Java.\nimport org.tensorflow.framework.MetaGraphDef;\nimport org.tensorflow.framework.SignatureDef;\n\n\n\nSyntax\n\n\ntensorFlow:predict(\nSTRING\n absolute.path.to.model, \nSTRING\n input.node.names, \nSTRING\n output.node.names, \nINT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT\n attributes)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nabsolute.path.to.model\n\n        \nThis is the absolute path to the model folder in the local machine.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.node.names\n\n        \nThis is a variable length parameter. The names of the input nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \noutput.node.names\n\n        \nThis is a variable length parameter. The names of the output nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattributes\n\n        \nThis is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent.\n\n        \n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \noutputs\n\n        \nThis is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def\n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;\n\n\n\n\n\nThis is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "1.1.1"
        }, 
        {
            "location": "/api/1.1.1/#api-docs-v111", 
            "text": "", 
            "title": "API Docs - v1.1.1"
        }, 
        {
            "location": "/api/1.1.1/#tensorflow", 
            "text": "", 
            "title": "Tensorflow"
        }, 
        {
            "location": "/api/1.1.1/#predict-stream-processor", 
            "text": "Performs inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions. 1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md) 2. Model is initially trained and ready for inferences 3. Inference logic is written and saved in the model 4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default' Also the prerequisites for inference are as follows. 1. User knows the names of the input and output nodes 2. Has a preprocessed data set of Java primitive types or their multidimensional arrays Since each input is directly used to create a Tensor they should be of compatible shape and data type with the model. The information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model signature_def can be read in Python as follows with tf.Session() as sess: md = tf.saved_model.loader.load(sess, ['serve'], export_dir) sig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY] print(sig) Or you can read signature def from Java as follows, final String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\";  final SignatureDef sig = MetaGraphDef.parseFrom(model.metaGraphDef()) .getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY); You will have to import the following in Java. import org.tensorflow.framework.MetaGraphDef; import org.tensorflow.framework.SignatureDef;  Syntax  tensorFlow:predict( STRING  absolute.path.to.model,  STRING  input.node.names,  STRING  output.node.names,  INT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT  attributes)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         absolute.path.to.model \n         This is the absolute path to the model folder in the local machine. \n         \n         STRING \n         No \n         No \n     \n     \n         input.node.names \n         This is a variable length parameter. The names of the input nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         output.node.names \n         This is a variable length parameter. The names of the output nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         attributes \n         This is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent. \n         \n         INT STRING DOUBLE LONG FLOAT BOOL OBJECT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         outputs \n         This is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def \n         INT STRING DOUBLE LONG FLOAT BOOL \n       Examples  EXAMPLE 1  define stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;  This is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "predict (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.0/", 
            "text": "API Docs - v1.1.0\n\n\nTensorflow\n\n\npredict \n(Stream Processor)\n\n\nPerforms inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions.\n1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md)\n2. Model is initially trained and ready for inferences\n3. Inference logic is written and saved in the model\n4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default'\nAlso the prerequisites for inference are as follows.\n1. User knows the names of the input and output nodes\n2. Has a preprocessed data set of Java primitive types or their multidimensional arrays\nSince each input is directly used to create a Tensor they should be of compatible shape and data type with the model.\nThe information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model\nsignature_def can be read in Python as follows\nwith tf.Session() as sess:\nmd = tf.saved_model.loader.load(sess, ['serve'], export_dir)\nsig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY]\nprint(sig)\nOr you can read signature def from Java as follows,\nfinal String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\"; \nfinal SignatureDef sig =\nMetaGraphDef.parseFrom(model.metaGraphDef())\n.getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY);\nYou will have to import the following in Java.\nimport org.tensorflow.framework.MetaGraphDef;\nimport org.tensorflow.framework.SignatureDef;\n\n\n\nSyntax\n\n\ntensorFlow:predict(\nSTRING\n absolute.path.to.model, \nSTRING\n input.node.names, \nSTRING\n output.node.names, \nINT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT\n attributes)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nabsolute.path.to.model\n\n        \nThis is the absolute path to the model folder in the local machine.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.node.names\n\n        \nThis is a variable length parameter. The names of the input nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \noutput.node.names\n\n        \nThis is a variable length parameter. The names of the output nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattributes\n\n        \nThis is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent.\n\n        \n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \noutputs\n\n        \nThis is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def\n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;\n\n\n\n\n\nThis is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "1.1.0"
        }, 
        {
            "location": "/api/1.1.0/#api-docs-v110", 
            "text": "", 
            "title": "API Docs - v1.1.0"
        }, 
        {
            "location": "/api/1.1.0/#tensorflow", 
            "text": "", 
            "title": "Tensorflow"
        }, 
        {
            "location": "/api/1.1.0/#predict-stream-processor", 
            "text": "Performs inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions. 1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md) 2. Model is initially trained and ready for inferences 3. Inference logic is written and saved in the model 4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default' Also the prerequisites for inference are as follows. 1. User knows the names of the input and output nodes 2. Has a preprocessed data set of Java primitive types or their multidimensional arrays Since each input is directly used to create a Tensor they should be of compatible shape and data type with the model. The information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model signature_def can be read in Python as follows with tf.Session() as sess: md = tf.saved_model.loader.load(sess, ['serve'], export_dir) sig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY] print(sig) Or you can read signature def from Java as follows, final String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\";  final SignatureDef sig = MetaGraphDef.parseFrom(model.metaGraphDef()) .getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY); You will have to import the following in Java. import org.tensorflow.framework.MetaGraphDef; import org.tensorflow.framework.SignatureDef;  Syntax  tensorFlow:predict( STRING  absolute.path.to.model,  STRING  input.node.names,  STRING  output.node.names,  INT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT  attributes)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         absolute.path.to.model \n         This is the absolute path to the model folder in the local machine. \n         \n         STRING \n         No \n         No \n     \n     \n         input.node.names \n         This is a variable length parameter. The names of the input nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         output.node.names \n         This is a variable length parameter. The names of the output nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         attributes \n         This is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent. \n         \n         INT STRING DOUBLE LONG FLOAT BOOL OBJECT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         outputs \n         This is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def \n         INT STRING DOUBLE LONG FLOAT BOOL \n       Examples  EXAMPLE 1  define stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;  This is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "predict (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.8/", 
            "text": "API Docs - v1.0.8\n\n\nTensorflow\n\n\npredict \n(Stream Processor)\n\n\nPerforms inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions.\n1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md)\n2. Model is initially trained and ready for inferences\n3. Inference logic is written and saved in the model\n4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default'\nAlso the prerequisites for inference are as follows.\n1. User knows the names of the input and output nodes\n2. Has a preprocessed data set of Java primitive types or their multidimensional arrays\nSince each input is directly used to create a Tensor they should be of compatible shape and data type with the model.\nThe information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model\nsignature_def can be read in Python as follows\nwith tf.Session() as sess:\nmd = tf.saved_model.loader.load(sess, ['serve'], export_dir)\nsig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY]\nprint(sig)\nOr you can read signature def from Java as follows,\nfinal String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\"; \nfinal SignatureDef sig =\nMetaGraphDef.parseFrom(model.metaGraphDef())\n.getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY);\nYou will have to import the following in Java.\nimport org.tensorflow.framework.MetaGraphDef;\nimport org.tensorflow.framework.SignatureDef;\n\n\n\nSyntax\n\n\ntensorFlow:predict(\nSTRING\n absolute.path.to.model, \nSTRING\n input.node.names, \nSTRING\n output.node.names, \nINT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT\n attributes)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nabsolute.path.to.model\n\n        \nThis is the absolute path to the model folder in the local machine.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.node.names\n\n        \nThis is a variable length parameter. The names of the input nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \noutput.node.names\n\n        \nThis is a variable length parameter. The names of the output nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattributes\n\n        \nThis is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent.\n\n        \n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \noutputs\n\n        \nThis is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def\n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;\n\n\n\n\n\nThis is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "1.0.8"
        }, 
        {
            "location": "/api/1.0.8/#api-docs-v108", 
            "text": "", 
            "title": "API Docs - v1.0.8"
        }, 
        {
            "location": "/api/1.0.8/#tensorflow", 
            "text": "", 
            "title": "Tensorflow"
        }, 
        {
            "location": "/api/1.0.8/#predict-stream-processor", 
            "text": "Performs inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions. 1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md) 2. Model is initially trained and ready for inferences 3. Inference logic is written and saved in the model 4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default' Also the prerequisites for inference are as follows. 1. User knows the names of the input and output nodes 2. Has a preprocessed data set of Java primitive types or their multidimensional arrays Since each input is directly used to create a Tensor they should be of compatible shape and data type with the model. The information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model signature_def can be read in Python as follows with tf.Session() as sess: md = tf.saved_model.loader.load(sess, ['serve'], export_dir) sig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY] print(sig) Or you can read signature def from Java as follows, final String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\";  final SignatureDef sig = MetaGraphDef.parseFrom(model.metaGraphDef()) .getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY); You will have to import the following in Java. import org.tensorflow.framework.MetaGraphDef; import org.tensorflow.framework.SignatureDef;  Syntax  tensorFlow:predict( STRING  absolute.path.to.model,  STRING  input.node.names,  STRING  output.node.names,  INT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT  attributes)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         absolute.path.to.model \n         This is the absolute path to the model folder in the local machine. \n         \n         STRING \n         No \n         No \n     \n     \n         input.node.names \n         This is a variable length parameter. The names of the input nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         output.node.names \n         This is a variable length parameter. The names of the output nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         attributes \n         This is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent. \n         \n         INT STRING DOUBLE LONG FLOAT BOOL OBJECT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         outputs \n         This is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def \n         INT STRING DOUBLE LONG FLOAT BOOL \n       Examples  EXAMPLE 1  define stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;  This is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "predict (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.7/", 
            "text": "API Docs - v1.0.7\n\n\nTensorflow\n\n\npredict \n(Stream Processor)\n\n\nPerforms inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions.\n1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md)\n2. Model is initially trained and ready for inferences\n3. Inference logic is written and saved in the model\n4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default'\nAlso the prerequisites for inference are as follows.\n1. User knows the names of the input and output nodes\n2. Has a preprocessed data set of Java primitive types or their multidimensional arrays\nSince each input is directly used to create a Tensor they should be of compatible shape and data type with the model.\nThe information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model\nsignature_def can be read in Python as follows\nwith tf.Session() as sess:\nmd = tf.saved_model.loader.load(sess, ['serve'], export_dir)\nsig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY]\nprint(sig)\nOr you can read signature def from Java as follows,\nfinal String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\"; \nfinal SignatureDef sig =\nMetaGraphDef.parseFrom(model.metaGraphDef())\n.getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY);\nYou will have to import the following in Java.\nimport org.tensorflow.framework.MetaGraphDef;\nimport org.tensorflow.framework.SignatureDef;\n\n\n\nSyntax\n\n\ntensorFlow:predict(\nSTRING\n absolute.path.to.model, \nSTRING\n input.node.names, \nSTRING\n output.node.names, \nINT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT\n attributes)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nabsolute.path.to.model\n\n        \nThis is the absolute path to the model folder in the local machine.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.node.names\n\n        \nThis is a variable length parameter. The names of the input nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \noutput.node.names\n\n        \nThis is a variable length parameter. The names of the output nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattributes\n\n        \nThis is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent.\n\n        \n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \noutputs\n\n        \nThis is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def\n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;\n\n\n\n\n\nThis is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "1.0.7"
        }, 
        {
            "location": "/api/1.0.7/#api-docs-v107", 
            "text": "", 
            "title": "API Docs - v1.0.7"
        }, 
        {
            "location": "/api/1.0.7/#tensorflow", 
            "text": "", 
            "title": "Tensorflow"
        }, 
        {
            "location": "/api/1.0.7/#predict-stream-processor", 
            "text": "Performs inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions. 1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md) 2. Model is initially trained and ready for inferences 3. Inference logic is written and saved in the model 4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default' Also the prerequisites for inference are as follows. 1. User knows the names of the input and output nodes 2. Has a preprocessed data set of Java primitive types or their multidimensional arrays Since each input is directly used to create a Tensor they should be of compatible shape and data type with the model. The information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model signature_def can be read in Python as follows with tf.Session() as sess: md = tf.saved_model.loader.load(sess, ['serve'], export_dir) sig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY] print(sig) Or you can read signature def from Java as follows, final String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\";  final SignatureDef sig = MetaGraphDef.parseFrom(model.metaGraphDef()) .getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY); You will have to import the following in Java. import org.tensorflow.framework.MetaGraphDef; import org.tensorflow.framework.SignatureDef;  Syntax  tensorFlow:predict( STRING  absolute.path.to.model,  STRING  input.node.names,  STRING  output.node.names,  INT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT  attributes)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         absolute.path.to.model \n         This is the absolute path to the model folder in the local machine. \n         \n         STRING \n         No \n         No \n     \n     \n         input.node.names \n         This is a variable length parameter. The names of the input nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         output.node.names \n         This is a variable length parameter. The names of the output nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         attributes \n         This is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent. \n         \n         INT STRING DOUBLE LONG FLOAT BOOL OBJECT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         outputs \n         This is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def \n         INT STRING DOUBLE LONG FLOAT BOOL \n       Examples  EXAMPLE 1  define stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;  This is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "predict (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.6/", 
            "text": "API Docs - v1.0.6\n\n\nTensorflow\n\n\npredict \n(Stream Processor)\n\n\nPerforms inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions.\n1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md)\n2. Model is initially trained and ready for inferences\n3. Inference logic is written and saved in the model\n4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default'\nAlso the prerequisites for inference are as follows.\n1. User knows the names of the input and output nodes\n2. Has a preprocessed data set of Java primitive types or their multidimensional arrays\nSince each input is directly used to create a Tensor they should be of compatible shape and data type with the model.\nThe information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model\nsignature_def can be read in Python as follows\nwith tf.Session() as sess:\nmd = tf.saved_model.loader.load(sess, ['serve'], export_dir)\nsig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY]\nprint(sig)\nOr you can read signature def from Java as follows,\nfinal String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\"; \nfinal SignatureDef sig =\nMetaGraphDef.parseFrom(model.metaGraphDef())\n.getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY);\nYou will have to import the following in Java.\nimport org.tensorflow.framework.MetaGraphDef;\nimport org.tensorflow.framework.SignatureDef;\n\n\n\nSyntax\n\n\ntensorFlow:predict(\nSTRING\n absolute.path.to.model, \nSTRING\n input.node.names, \nSTRING\n output.node.names, \nINT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT\n attributes)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nabsolute.path.to.model\n\n        \nThis is the absolute path to the model folder in the local machine.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.node.names\n\n        \nThis is a variable length parameter. The names of the input nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \noutput.node.names\n\n        \nThis is a variable length parameter. The names of the output nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattributes\n\n        \nThis is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent.\n\n        \n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \noutputs\n\n        \nThis is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def\n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;\n\n\n\n\n\nThis is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "1.0.6"
        }, 
        {
            "location": "/api/1.0.6/#api-docs-v106", 
            "text": "", 
            "title": "API Docs - v1.0.6"
        }, 
        {
            "location": "/api/1.0.6/#tensorflow", 
            "text": "", 
            "title": "Tensorflow"
        }, 
        {
            "location": "/api/1.0.6/#predict-stream-processor", 
            "text": "Performs inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions. 1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md) 2. Model is initially trained and ready for inferences 3. Inference logic is written and saved in the model 4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default' Also the prerequisites for inference are as follows. 1. User knows the names of the input and output nodes 2. Has a preprocessed data set of Java primitive types or their multidimensional arrays Since each input is directly used to create a Tensor they should be of compatible shape and data type with the model. The information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model signature_def can be read in Python as follows with tf.Session() as sess: md = tf.saved_model.loader.load(sess, ['serve'], export_dir) sig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY] print(sig) Or you can read signature def from Java as follows, final String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\";  final SignatureDef sig = MetaGraphDef.parseFrom(model.metaGraphDef()) .getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY); You will have to import the following in Java. import org.tensorflow.framework.MetaGraphDef; import org.tensorflow.framework.SignatureDef;  Syntax  tensorFlow:predict( STRING  absolute.path.to.model,  STRING  input.node.names,  STRING  output.node.names,  INT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT  attributes)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         absolute.path.to.model \n         This is the absolute path to the model folder in the local machine. \n         \n         STRING \n         No \n         No \n     \n     \n         input.node.names \n         This is a variable length parameter. The names of the input nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         output.node.names \n         This is a variable length parameter. The names of the output nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         attributes \n         This is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent. \n         \n         INT STRING DOUBLE LONG FLOAT BOOL OBJECT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         outputs \n         This is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def \n         INT STRING DOUBLE LONG FLOAT BOOL \n       Examples  EXAMPLE 1  define stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;  This is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "predict (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.5/", 
            "text": "API Docs - v1.0.5\n\n\nTensorflow\n\n\npredict \n(Stream Processor)\n\n\nPerforms inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions.\n1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md)\n2. Model is initially trained and ready for inferences\n3. Inference logic is written and saved in the model\n4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default'\nAlso the prerequisites for inference are as follows.\n1. User knows the names of the input and output nodes\n2. Has a preprocessed data set of Java primitive types or their multidimensional arrays\nSince each input is directly used to create a Tensor they should be of compatible shape and data type with the model.\nThe information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model\nsignature_def can be read in Python as follows\nwith tf.Session() as sess:\nmd = tf.saved_model.loader.load(sess, ['serve'], export_dir)\nsig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY]\nprint(sig)\nOr you can read signature def from Java as follows,\nfinal String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\"; \nfinal SignatureDef sig =\nMetaGraphDef.parseFrom(model.metaGraphDef())\n.getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY);\nYou will have to import the following in Java.\nimport org.tensorflow.framework.MetaGraphDef;\nimport org.tensorflow.framework.SignatureDef;\n\n\n\nSyntax\n\n\ntensorFlow:predict(\nSTRING\n absolute.path.to.model, \nSTRING\n input.node.names, \nSTRING\n output.node.names, \nINT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT\n attributes)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nabsolute.path.to.model\n\n        \nThis is the absolute path to the model folder in the local machine.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.node.names\n\n        \nThis is a variable length parameter. The names of the input nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \noutput.node.names\n\n        \nThis is a variable length parameter. The names of the output nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattributes\n\n        \nThis is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent.\n\n        \n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \noutputs\n\n        \nThis is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def\n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;\n\n\n\n\n\nThis is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "1.0.5"
        }, 
        {
            "location": "/api/1.0.5/#api-docs-v105", 
            "text": "", 
            "title": "API Docs - v1.0.5"
        }, 
        {
            "location": "/api/1.0.5/#tensorflow", 
            "text": "", 
            "title": "Tensorflow"
        }, 
        {
            "location": "/api/1.0.5/#predict-stream-processor", 
            "text": "Performs inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions. 1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md) 2. Model is initially trained and ready for inferences 3. Inference logic is written and saved in the model 4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default' Also the prerequisites for inference are as follows. 1. User knows the names of the input and output nodes 2. Has a preprocessed data set of Java primitive types or their multidimensional arrays Since each input is directly used to create a Tensor they should be of compatible shape and data type with the model. The information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model signature_def can be read in Python as follows with tf.Session() as sess: md = tf.saved_model.loader.load(sess, ['serve'], export_dir) sig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY] print(sig) Or you can read signature def from Java as follows, final String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\";  final SignatureDef sig = MetaGraphDef.parseFrom(model.metaGraphDef()) .getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY); You will have to import the following in Java. import org.tensorflow.framework.MetaGraphDef; import org.tensorflow.framework.SignatureDef;  Syntax  tensorFlow:predict( STRING  absolute.path.to.model,  STRING  input.node.names,  STRING  output.node.names,  INT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT  attributes)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         absolute.path.to.model \n         This is the absolute path to the model folder in the local machine. \n         \n         STRING \n         No \n         No \n     \n     \n         input.node.names \n         This is a variable length parameter. The names of the input nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         output.node.names \n         This is a variable length parameter. The names of the output nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         attributes \n         This is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent. \n         \n         INT STRING DOUBLE LONG FLOAT BOOL OBJECT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         outputs \n         This is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def \n         INT STRING DOUBLE LONG FLOAT BOOL \n       Examples  EXAMPLE 1  define stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;  This is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "predict (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.4/", 
            "text": "API Docs - v1.0.4\n\n\nTensorflow\n\n\npredict \n(Stream Processor)\n\n\nPerforms inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions.\n1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md)\n2. Model is initially trained and ready for inferences\n3. Inference logic is written and saved in the model\n4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default'\nAlso the prerequisites for inference are as follows.\n1. User knows the names of the input and output nodes\n2. Has a preprocessed data set of Java primitive types or their multidimensional arrays\nSince each input is directly used to create a Tensor they should be of compatible shape and data type with the model.\nThe information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model\nsignature_def can be read in Python as follows\nwith tf.Session() as sess:\nmd = tf.saved_model.loader.load(sess, ['serve'], export_dir)\nsig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY]\nprint(sig)\nOr you can read signature def from Java as follows,\nfinal String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\"; \nfinal SignatureDef sig =\nMetaGraphDef.parseFrom(model.metaGraphDef())\n.getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY);\nYou will have to import the following in Java.\nimport org.tensorflow.framework.MetaGraphDef;\nimport org.tensorflow.framework.SignatureDef;\n\n\n\nSyntax\n\n\ntensorFlow:predict(\nSTRING\n absolute.path.to.model, \nSTRING\n input.node.names, \nSTRING\n output.node.names, \nINT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT\n attributes)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nabsolute.path.to.model\n\n        \nThis is the absolute path to the model folder in the local machine.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.node.names\n\n        \nThis is a variable length parameter. The names of the input nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \noutput.node.names\n\n        \nThis is a variable length parameter. The names of the output nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattributes\n\n        \nThis is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent.\n\n        \n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \noutputs\n\n        \nThis is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def\n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;\n\n\n\n\n\nThis is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "1.0.4"
        }, 
        {
            "location": "/api/1.0.4/#api-docs-v104", 
            "text": "", 
            "title": "API Docs - v1.0.4"
        }, 
        {
            "location": "/api/1.0.4/#tensorflow", 
            "text": "", 
            "title": "Tensorflow"
        }, 
        {
            "location": "/api/1.0.4/#predict-stream-processor", 
            "text": "Performs inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions. 1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md) 2. Model is initially trained and ready for inferences 3. Inference logic is written and saved in the model 4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default' Also the prerequisites for inference are as follows. 1. User knows the names of the input and output nodes 2. Has a preprocessed data set of Java primitive types or their multidimensional arrays Since each input is directly used to create a Tensor they should be of compatible shape and data type with the model. The information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model signature_def can be read in Python as follows with tf.Session() as sess: md = tf.saved_model.loader.load(sess, ['serve'], export_dir) sig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY] print(sig) Or you can read signature def from Java as follows, final String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\";  final SignatureDef sig = MetaGraphDef.parseFrom(model.metaGraphDef()) .getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY); You will have to import the following in Java. import org.tensorflow.framework.MetaGraphDef; import org.tensorflow.framework.SignatureDef;  Syntax  tensorFlow:predict( STRING  absolute.path.to.model,  STRING  input.node.names,  STRING  output.node.names,  INT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT  attributes)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         absolute.path.to.model \n         This is the absolute path to the model folder in the local machine. \n         \n         STRING \n         No \n         No \n     \n     \n         input.node.names \n         This is a variable length parameter. The names of the input nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         output.node.names \n         This is a variable length parameter. The names of the output nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         attributes \n         This is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent. \n         \n         INT STRING DOUBLE LONG FLOAT BOOL OBJECT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         outputs \n         This is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def \n         INT STRING DOUBLE LONG FLOAT BOOL \n       Examples  EXAMPLE 1  define stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;  This is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "predict (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.3/", 
            "text": "API Docs - v1.0.3\n\n\nTensorflow\n\n\npredict \n(Stream Processor)\n\n\nPerforms inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions.\n1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md)\n2. Model is initially trained and ready for inferences\n3. Inference logic is written and saved in the model\n4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default'\nAlso the prerequisites for inference are as follows.\n1. User knows the names of the input and output nodes\n2. Has a preprocessed data set of Java primitive types or their multidimensional arrays\nSince each input is directly used to create a Tensor they should be of compatible shape and data type with the model.\nThe information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model\nsignature_def can be read in Python as follows\nwith tf.Session() as sess:\nmd = tf.saved_model.loader.load(sess, ['serve'], export_dir)\nsig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY]\nprint(sig)\nOr you can read signature def from Java as follows,\nfinal String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\"; \nfinal SignatureDef sig =\nMetaGraphDef.parseFrom(model.metaGraphDef())\n.getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY);\nYou will have to import the following in Java.\nimport org.tensorflow.framework.MetaGraphDef;\nimport org.tensorflow.framework.SignatureDef;\n\n\n\nSyntax\n\n\ntensorFlow:predict(\nSTRING\n absolute.path.to.model, \nSTRING\n input.node.names, \nSTRING\n output.node.names, \nINT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT\n attributes)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nabsolute.path.to.model\n\n        \nThis is the absolute path to the model folder in the local machine.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.node.names\n\n        \nThis is a variable length parameter. The names of the input nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \noutput.node.names\n\n        \nThis is a variable length parameter. The names of the output nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattributes\n\n        \nThis is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent.\n\n        \n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \noutputs\n\n        \nThis is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def\n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;\n\n\n\n\n\nThis is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "1.0.3"
        }, 
        {
            "location": "/api/1.0.3/#api-docs-v103", 
            "text": "", 
            "title": "API Docs - v1.0.3"
        }, 
        {
            "location": "/api/1.0.3/#tensorflow", 
            "text": "", 
            "title": "Tensorflow"
        }, 
        {
            "location": "/api/1.0.3/#predict-stream-processor", 
            "text": "Performs inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions. 1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md) 2. Model is initially trained and ready for inferences 3. Inference logic is written and saved in the model 4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default' Also the prerequisites for inference are as follows. 1. User knows the names of the input and output nodes 2. Has a preprocessed data set of Java primitive types or their multidimensional arrays Since each input is directly used to create a Tensor they should be of compatible shape and data type with the model. The information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model signature_def can be read in Python as follows with tf.Session() as sess: md = tf.saved_model.loader.load(sess, ['serve'], export_dir) sig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY] print(sig) Or you can read signature def from Java as follows, final String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\";  final SignatureDef sig = MetaGraphDef.parseFrom(model.metaGraphDef()) .getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY); You will have to import the following in Java. import org.tensorflow.framework.MetaGraphDef; import org.tensorflow.framework.SignatureDef;  Syntax  tensorFlow:predict( STRING  absolute.path.to.model,  STRING  input.node.names,  STRING  output.node.names,  INT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT  attributes)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         absolute.path.to.model \n         This is the absolute path to the model folder in the local machine. \n         \n         STRING \n         No \n         No \n     \n     \n         input.node.names \n         This is a variable length parameter. The names of the input nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         output.node.names \n         This is a variable length parameter. The names of the output nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         attributes \n         This is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent. \n         \n         INT STRING DOUBLE LONG FLOAT BOOL OBJECT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         outputs \n         This is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def \n         INT STRING DOUBLE LONG FLOAT BOOL \n       Examples  EXAMPLE 1  define stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;  This is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "predict (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.2/", 
            "text": "API Docs - v1.0.2\n\n\nTensorflow\n\n\npredict \n(Stream Processor)\n\n\nPerforms inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions.\n1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md)\n2. Model is initially trained and ready for inferences\n3. Inference logic is written and saved in the model\n4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default'\nAlso the prerequisites for inference are as follows.\n1. User knows the names of the input and output nodes\n2. Has a preprocessed data set of Java primitive types or their multidimensional arrays\nSince each input is directly used to create a Tensor they should be of compatible shape and data type with the model.\nThe information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model\nsignature_def can be read in Python as follows\nwith tf.Session() as sess:\nmd = tf.saved_model.loader.load(sess, ['serve'], export_dir)\nsig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY]\nprint(sig)\nOr you can read signature def from Java as follows,\nfinal String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\"; \nfinal SignatureDef sig =\nMetaGraphDef.parseFrom(model.metaGraphDef())\n.getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY);\nYou will have to import the following in Java.\nimport org.tensorflow.framework.MetaGraphDef;\nimport org.tensorflow.framework.SignatureDef;\n\n\n\nSyntax\n\n\ntensorFlow:predict(\nSTRING\n absolute.path.to.model, \nSTRING\n input.node.names, \nSTRING\n output.node.names, \nINT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT\n attributes)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nabsolute.path.to.model\n\n        \nThis is the absolute path to the model folder in the local machine.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.node.names\n\n        \nThis is a variable length parameter. The names of the input nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \noutput.node.names\n\n        \nThis is a variable length parameter. The names of the output nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattributes\n\n        \nThis is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent.\n\n        \n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \noutputs\n\n        \nThis is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def\n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;\n\n\n\n\n\nThis is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "1.0.2"
        }, 
        {
            "location": "/api/1.0.2/#api-docs-v102", 
            "text": "", 
            "title": "API Docs - v1.0.2"
        }, 
        {
            "location": "/api/1.0.2/#tensorflow", 
            "text": "", 
            "title": "Tensorflow"
        }, 
        {
            "location": "/api/1.0.2/#predict-stream-processor", 
            "text": "Performs inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions. 1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md) 2. Model is initially trained and ready for inferences 3. Inference logic is written and saved in the model 4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default' Also the prerequisites for inference are as follows. 1. User knows the names of the input and output nodes 2. Has a preprocessed data set of Java primitive types or their multidimensional arrays Since each input is directly used to create a Tensor they should be of compatible shape and data type with the model. The information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model signature_def can be read in Python as follows with tf.Session() as sess: md = tf.saved_model.loader.load(sess, ['serve'], export_dir) sig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY] print(sig) Or you can read signature def from Java as follows, final String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\";  final SignatureDef sig = MetaGraphDef.parseFrom(model.metaGraphDef()) .getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY); You will have to import the following in Java. import org.tensorflow.framework.MetaGraphDef; import org.tensorflow.framework.SignatureDef;  Syntax  tensorFlow:predict( STRING  absolute.path.to.model,  STRING  input.node.names,  STRING  output.node.names,  INT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT  attributes)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         absolute.path.to.model \n         This is the absolute path to the model folder in the local machine. \n         \n         STRING \n         No \n         No \n     \n     \n         input.node.names \n         This is a variable length parameter. The names of the input nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         output.node.names \n         This is a variable length parameter. The names of the output nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         attributes \n         This is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent. \n         \n         INT STRING DOUBLE LONG FLOAT BOOL OBJECT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         outputs \n         This is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def \n         INT STRING DOUBLE LONG FLOAT BOOL \n       Examples  EXAMPLE 1  define stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;  This is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "predict (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.1/", 
            "text": "API Docs - v1.0.1\n\n\nTensorflow\n\n\npredict \n(Stream Processor)\n\n\nPerforms inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions.\n1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md)\n2. Model is initially trained and ready for inferences\n3. Inference logic is written and saved in the model\n4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default'\nAlso the prerequisites for inference are as follows.\n1. User knows the names of the input and output nodes\n2. Has a preprocessed data set of Java primitive types or their multidimensional arrays\nSince each input is directly used to create a Tensor they should be of compatible shape and data type with the model.\nThe information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model\nsignature_def can be read in Python as follows\nwith tf.Session() as sess:\nmd = tf.saved_model.loader.load(sess, ['serve'], export_dir)\nsig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY]\nprint(sig)\nOr you can read signature def from Java as follows,\nfinal String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\"; \nfinal SignatureDef sig =\nMetaGraphDef.parseFrom(model.metaGraphDef())\n.getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY);\nYou will have to import the following in Java.\nimport org.tensorflow.framework.MetaGraphDef;\nimport org.tensorflow.framework.SignatureDef;\n\n\n\nSyntax\n\n\ntensorFlow:predict(\nSTRING\n absolute.path.to.model, \nSTRING\n input.node.names, \nSTRING\n output.node.names, \nINT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT\n attributes)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nabsolute.path.to.model\n\n        \nThis is the absolute path to the model folder in the local machine.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.node.names\n\n        \nThis is a variable length parameter. The names of the input nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \noutput.node.names\n\n        \nThis is a variable length parameter. The names of the output nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattributes\n\n        \nThis is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent.\n\n        \n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \noutputs\n\n        \nThis is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def\n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;\n\n\n\n\n\nThis is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "1.0.1"
        }, 
        {
            "location": "/api/1.0.1/#api-docs-v101", 
            "text": "", 
            "title": "API Docs - v1.0.1"
        }, 
        {
            "location": "/api/1.0.1/#tensorflow", 
            "text": "", 
            "title": "Tensorflow"
        }, 
        {
            "location": "/api/1.0.1/#predict-stream-processor", 
            "text": "Performs inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions. 1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md) 2. Model is initially trained and ready for inferences 3. Inference logic is written and saved in the model 4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default' Also the prerequisites for inference are as follows. 1. User knows the names of the input and output nodes 2. Has a preprocessed data set of Java primitive types or their multidimensional arrays Since each input is directly used to create a Tensor they should be of compatible shape and data type with the model. The information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model signature_def can be read in Python as follows with tf.Session() as sess: md = tf.saved_model.loader.load(sess, ['serve'], export_dir) sig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY] print(sig) Or you can read signature def from Java as follows, final String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\";  final SignatureDef sig = MetaGraphDef.parseFrom(model.metaGraphDef()) .getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY); You will have to import the following in Java. import org.tensorflow.framework.MetaGraphDef; import org.tensorflow.framework.SignatureDef;  Syntax  tensorFlow:predict( STRING  absolute.path.to.model,  STRING  input.node.names,  STRING  output.node.names,  INT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT  attributes)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         absolute.path.to.model \n         This is the absolute path to the model folder in the local machine. \n         \n         STRING \n         No \n         No \n     \n     \n         input.node.names \n         This is a variable length parameter. The names of the input nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         output.node.names \n         This is a variable length parameter. The names of the output nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         attributes \n         This is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent. \n         \n         INT STRING DOUBLE LONG FLOAT BOOL OBJECT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         outputs \n         This is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def \n         INT STRING DOUBLE LONG FLOAT BOOL \n       Examples  EXAMPLE 1  define stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;  This is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "predict (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.0/", 
            "text": "API Docs - v1.0.0\n\n\nTensorflow\n\n\npredict \n(Stream Processor)\n\n\nPerforms inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions.\n1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md)\n2. Model is initially trained and ready for inferences\n3. Inference logic is written and saved in the model\n4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default'\nAlso the prerequisites for inference are as follows.\n1. User knows the names of the input and output nodes\n2. Has a preprocessed data set of Java primitive types or their multidimensional arrays\nSince each input is directly used to create a Tensor they should be of compatible shape and data type with the model.\nThe information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model\nsignature_def can be read in Python as follows\nwith tf.Session() as sess:\nmd = tf.saved_model.loader.load(sess, ['serve'], export_dir)\nsig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY]\nprint(sig)\nOr you can read signature def from Java as follows,\nfinal String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\"; \nfinal SignatureDef sig =\nMetaGraphDef.parseFrom(model.metaGraphDef())\n.getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY);\nYou will have to import the following in Java.\nimport org.tensorflow.framework.MetaGraphDef;\nimport org.tensorflow.framework.SignatureDef;\n\n\n\nSyntax\n\n\ntensorFlow:predict(\nSTRING\n absolute.path.to.model, \nSTRING\n input.node.names, \nSTRING\n output.node.names, \nINT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT\n attributes)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nabsolute.path.to.model\n\n        \nThis is the absolute path to the model folder in the local machine.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ninput.node.names\n\n        \nThis is a variable length parameter. The names of the input nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \noutput.node.names\n\n        \nThis is a variable length parameter. The names of the output nodes as comma separated strings.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattributes\n\n        \nThis is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent.\n\n        \n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \noutputs\n\n        \nThis is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def\n\n        \nINT\nSTRING\nDOUBLE\nLONG\nFLOAT\nBOOL\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;\n\n\n\n\n\nThis is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "1.0.0"
        }, 
        {
            "location": "/api/1.0.0/#api-docs-v100", 
            "text": "", 
            "title": "API Docs - v1.0.0"
        }, 
        {
            "location": "/api/1.0.0/#tensorflow", 
            "text": "", 
            "title": "Tensorflow"
        }, 
        {
            "location": "/api/1.0.0/#predict-stream-processor", 
            "text": "Performs inferences (prediction) from an already built TensorFlow machine learning model. The types of models are unlimited (including image classifiers, deep learning models) as long as they satisfy the following conditions. 1. They are saved with the tag 'serve' in SavedModel format (See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md) 2. Model is initially trained and ready for inferences 3. Inference logic is written and saved in the model 4. signature_def is properly included in the metaGraphDef (a protocol buffer file which has information about the graph) and the key for prediction signature def is 'serving-default' Also the prerequisites for inference are as follows. 1. User knows the names of the input and output nodes 2. Has a preprocessed data set of Java primitive types or their multidimensional arrays Since each input is directly used to create a Tensor they should be of compatible shape and data type with the model. The information related to input and output nodes can be retrieved from saved model signature def.signature_def can be read by using the saved_model_cli commands found at https://www.tensorflow.org/programmers_guide/saved_model signature_def can be read in Python as follows with tf.Session() as sess: md = tf.saved_model.loader.load(sess, ['serve'], export_dir) sig = md.signature_def[tf.saved_model.signature_constants.DEFAULT_SERVING_SIGNATURE_DEF_KEY] print(sig) Or you can read signature def from Java as follows, final String DEFAULT_SERVING_SIGNATURE_DEF_KEY = \"serving_default\";  final SignatureDef sig = MetaGraphDef.parseFrom(model.metaGraphDef()) .getSignatureDefOrThrow(DEFAULT_SERVING_SIGNATURE_DEF_KEY); You will have to import the following in Java. import org.tensorflow.framework.MetaGraphDef; import org.tensorflow.framework.SignatureDef;  Syntax  tensorFlow:predict( STRING  absolute.path.to.model,  STRING  input.node.names,  STRING  output.node.names,  INT|STRING|DOUBLE|LONG|FLOAT|BOOL|OBJECT  attributes)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         absolute.path.to.model \n         This is the absolute path to the model folder in the local machine. \n         \n         STRING \n         No \n         No \n     \n     \n         input.node.names \n         This is a variable length parameter. The names of the input nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         output.node.names \n         This is a variable length parameter. The names of the output nodes as comma separated strings. \n         \n         STRING \n         No \n         No \n     \n     \n         attributes \n         This is a variable length parameter. These are the attributes coming with events. Note that arrays should be cast to objects and sent. \n         \n         INT STRING DOUBLE LONG FLOAT BOOL OBJECT \n         No \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         outputs \n         This is a variable length return attribute. The output tensors from the inference will be flattened out and sent in their primitive values. User is expected to know the shape of the output tensors if he/she wishes to reconstruct it. The shape and data type information can be retrieved from TensorFlow saved model signature_def. See the description of this extension for instructions on how to read signature_def \n         INT STRING DOUBLE LONG FLOAT BOOL \n       Examples  EXAMPLE 1  define stream InputStream (x Object, y Object);\n@info(name = 'query1') \nfrom InputStream#tensorFlow:predict('home/MNIST', 'inputPoint', 'dropout', 'outputPoint', x, y) \nselect outputPoint0, outputPoint1, outputPoint2, outputPoint3, outputPoint4, outputPoint5, outputPoint6, outputPoint7, outputPoint8, outputPoint9 \ninsert into OutputStream;  This is a query to get inferences from a MNIST model. This model takes in 2 inputs. One being the image as float array and other is keep probability array and sends out a Tensor with 10 elements. Our stream processor flattens the tensor and sends 10 floats each representing the probability of image being 0,1,...,9", 
            "title": "predict (Stream Processor)"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2019 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}